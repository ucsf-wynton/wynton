SHELL=bash
.ONESHELL:

TMPDIR:=$(shell mktemp -d)

## Colored strings?
ifdef TERM
	TPUT:=true
	OK  :=$(shell tput setaf 2; printf "%s" " OK "; tput sgr0)
	FAIL:=$(shell tput setaf 1; printf "%s" "FAIL"; tput sgr0)
	YAMLLINT_OPTS:=-f colored
else
	TPUT:=false
	OK  :=$(shell printf "%s" " OK ")
	FAIL:=$(shell printf "%s" "FAIL")
	YAMLLINT_OPTS:=
endif


spelling:
	@echo "$@ ..."
	@Rscript -e 'paths <- dir(path = c("..", "."), pattern = "*[.]md$$", full.names = TRUE, recursive = TRUE); paths <- grep("_site", paths, value = TRUE, invert = TRUE); paths <- grep("software/software-repositories[.]md$$", paths, invert = TRUE, value = TRUE); paths <- c(paths, "_data/status.yml"); wordlist <- unique(sort(readLines("WORDLIST"))); words <- spelling::spell_check_files(paths, ignore = wordlist); print(words); ok <- (nrow(words) == 0); quit(status = !ok)' || { printf "\n\nSUGGESTION: If you believe these are correctly spelled, add them to 'docs/WORDLIST'\n\n"; exit 1; }

tsv-check:
	@echo "$@ ..."
	tf=$$(mktemp)
	stderr=$$(mktemp)
	bad=()
	files=$$(find . -type f -name "*.tsv" -not \( -path "./_site/*" -o -path "./drafts/*" \) | sort)
	for file in $$files; do
	    $(TPUT) && printf "[    ] checking %s" "$$file"
	    ## Remove header comments
	    grep -v -E "^#" "$${file}" > "$${tf}"
	    if Rscript -e "tryCatch(db <- read.csv('$${tf}', comment.char = "", sep = '\t'), error = function(ex) { message(conditionMessage(ex)); quit(status=1) })" 2> "$${stderr}"; then
	        ok_count=$$((ok_count+1))
	        $(TPUT) && printf "\r"
	        printf "[$(OK)] checking %s\\n" "$$file"
	    else
	        error_count=$$((error_count+1))
	        $(TPUT) && printf "\r"
	        printf "[$(FAIL)] checking %s [reason: %s]\\n" "$$file" "$$(cat "$${stderr}")"
	        bad+=("$${file}")
	    fi
	done
	if [[ $${#bad[@]} -gt 0 ]]; then
	    for file in "$${bad[@]}"; do
	        echo "Investigating $${file}:"
	        mapfile -t bfr < <(grep -v -E "^#" "$${file}" | sed 's/[^\t]//g' | sed 's/\t/./g' | sort | uniq -c)
	        if [[ $${#bfr[@]} -eq 1 ]]; then
	            echo "- all lines have same number of TABs"
	        else
	            echo "- lines have different number of TABs:"
	            printf "%s\n" "$${bfr[@]}"
	        fi    
	    done
	fi
	echo "RESULT: $$ok_count OK, $$error_count ERROR"
	if (( error_count > 0 )); then
	  exit 1
	fi
        
yaml-check:
	@echo "$@ ..."
	@Rscript -e 'paths <- dir(path = c(".", "_data"), pattern = "*[.]yml$$", full.names = TRUE, recursive = TRUE); yaml <- lapply(paths, FUN = yaml::read_yaml)'
	@echo "All ok"

markdownlint:
	@stdout=$(TMPDIR)/stdout
	rm -f "$$stdout"

	markdownlint --version /dev/null || exit 2

	ok_count=0
	error_count=0
	config=.markdownlint.json

	echo "$@ ..."
	if [[ ! -f "$$config" ]]; then
	   echo "File not found: $$config (PWD=$$PWD)"
	   ls -la
	   exit 1
	fi

	files=$$(find . -type f -name "*.md" -not \( -path "./_site/*" -o -path "./drafts/*" \) | sort)
	for file in $$files; do
	   $(TPUT) && printf "[    ] checking %s" "$$file"
	   config_file=$$(dirname "$$file")/.markdownlint.$$(basename "$${file//.md/}").json
	   if [[ ! -f "$$config_file" ]]; then
	     config_file="$$config"
	   fi
	   if markdownlint --config "$$config_file" "$$file" 2>> "$$stdout" ; then
	     ok_count=$$((ok_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(OK)] checking %s\\n" "$$file"
	   else
	     error_count=$$((error_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(FAIL)] checking %s\\n" "$$file"
	   fi
	done

	echo "RESULT: $$ok_count OK, $$error_count ERROR"
	if (( error_count > 0 )); then
	  cat "$$stdout"
	  exit 1
	fi

markdown-link-check:
	@stdout=$(TMPDIR)/stdout
	rm -f "$$stdout"

	markdown-link-check --version /dev/null || exit 2

	ok_count=0
	error_count=0
	config=.markdown-link-check.json

	echo "$@ ..."
	if [[ ! -f "$$config" ]]; then
	   echo "File not found: $$config (PWD=$$PWD)"
	   ls -la
	   exit 1
	fi

	files=$$(find . -type f -name "*.md" -not \( -path "./_site/*" -o -path "./drafts/*" \) | sort)
	for file in $$files; do
	   $(TPUT) && printf "[    ] checking %s" "$$file"
	   if markdown-link-check --quiet --config "$$config" "$$file" &>> "$$stdout" ; then
	     ok_count=$$((ok_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(OK)] checking %s\\n" "$$file"
	   else
	     error_count=$$((error_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(FAIL)] checking %s\\n" "$$file"
	   fi
	done

	echo "RESULT: $$ok_count OK, $$error_count ERROR"
	if (( error_count > 0 )); then
	  grep -B 1 -E "(^ERROR:|^\[(✖|x)\]|Status: [0-9]+$$)" "$$stdout"
	  echo "$$stdout"
	  exit 1
	fi

check-absolute-links:
	@stdout=$(TMPDIR)/stdout
	rm -f "$$stdout"

	ok_count=0
	error_count=0

	pattern="(http|https)://wynton.ucsf.edu"
	files=$$(find . -type f -name "*.md" -not \( -path "./_site/*" -o -path "./drafts/*" -o -path "./index.md" \) | sort)
	for file in $$files; do
	   $(TPUT) && printf "[    ] checking %s" "$$file"
	   if ! grep -H -i -E "$${pattern}" "$${file}" &>> "$$stdout" ; then
	     ok_count=$$((ok_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(OK)] checking %s\\n" "$$file"
	   elif [[ "$(basename "$${file}")" == */software/software-repositories.md ]] && ! grep -q -H -i -E "/scl[.]html$$" "$${file}" ; then
	     ## SPECIAL CASE             
	     ok_count=$$((ok_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(OK)] checking %s\\n" "$$file"
	   else
	     error_count=$$((error_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(FAIL)] checking %s\\n" "$$file"
	   fi
	done

	echo "RESULT: $$ok_count OK, $$error_count ERROR"
	if (( error_count > 0 )); then
	  grep --color=always -i -E "${pattern}" "$$stdout"
	  echo
	  echo "HINT: Use {{ 'path/file.html' | relative_url }} instead of https://wynton.ucsf.edu/hpc/path/file.html"
	  exit 1
	fi

check-here-links:
	@stdout=$(TMPDIR)/stdout
	rm -f "$$stdout"

	ok_count=0
	error_count=0

	files=$$(find . -type f -name "*.md" -not \( -path "./_site/*" -o -path "./drafts/*" \) | sort)
	for file in $$files; do
	   $(TPUT) && printf "[    ] checking %s" "$$file"
	   if ! grep -i -E "[[](click here|here|link|this|this form)[]]" "$${file}" &>> "$$stdout" ; then
	     ok_count=$$((ok_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(OK)] checking %s\\n" "$$file"
	   else
	     error_count=$$((error_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(FAIL)] checking %s\\n" "$$file"
	   fi
	done

	echo "RESULT: $$ok_count OK, $$error_count ERROR"
	if (( error_count > 0 )); then
	  grep -B 1 -E "(^ERROR:|^\[(✖|x)\]|Status: [0-9]+$$)" "$$stdout"
	  cat "$$stdout"
	  exit 1
	fi

check-usernames:
	@stdout=$(TMPDIR)/stdout
	rm -f "$$stdout"

	ok_count=0
	error_count=0

	echo "$@ ..."
	files=$$(find . -type f -name "*.md" -not \( -path "./_site/*" -o -path "./drafts/*" \) | sort)
	for file in $$files; do
	   $(TPUT) && printf "[    ] checking %s" "$$file"
	   if ! grep -H -n -E "(alice@[a-z]+[.]|\b(ahechmer|harry|hb|hb-test|henrik|hputnam|putnam|tnejo)\b)" "$$file" &>> "$$stdout" ; then
	     ok_count=$$((ok_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(OK)] checking %s\\n" "$$file"
	   else
	     error_count=$$((error_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(FAIL)] checking %s\\n" "$$file"
	   fi
	done

	echo "RESULT: $$ok_count OK, $$error_count ERROR"
	if (( error_count > 0 )); then
	  grep -B 1 -E "(^ERROR:|^\[(✖|x)\]|Status: [0-9]+$$)" "$$stdout"
	  echo "$$stdout"
	  cat "$$stdout"
	  exit 1
	fi

check-leftovers-from-C4:
	@stdout=$(TMPDIR)/stdout
	rm -f "$$stdout"

	ok_count=0
	error_count=0
	config=.markdown-link-check.json

	echo "$@ ..."
	files=$$(find . -type f -name "*.md" -not \( -path "./_site/*" -o -path "./drafts/*" \) | sort)
	for file in $$files; do
	   $(TPUT) && printf "[    ] checking %s" "$$file"
	   pattern="#[ ]*SBATCH|/c4/|SLURM|SBATCH|sbatch|squeue|sstat|sacct"
	   if [[ "$$file" =~ envvars.md$$ ]]; then
	     pattern=$$(echo "$$pattern" | sed 's/|SLURM_NPROCS//')
	   elif [[ "$$file" =~ (software-repositories).md$$ ]]; then
	     pattern=$$(echo "$$pattern" | sed 's/|SGE//')
	   fi
	   if ! grep -H -n -E "($$pattern)" "$$file" &>> "$$stdout" ; then
	     ok_count=$$((ok_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(OK)] checking %s\\n" "$$file"
	   else
	     error_count=$$((error_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(FAIL)] checking %s\\n" "$$file"
	   fi
	done

	echo "RESULT: $$ok_count OK, $$error_count ERROR"
	if (( error_count > 0 )); then
	  grep -B 1 -E "(^ERROR:|^\[(✖|x)\]|Status: [0-9]+$$)" "$$stdout"
	  echo "$$stdout"
	  cat "$$stdout"
	  exit 1
	fi

check-legacy:
	@stdout=$(TMPDIR)/stdout
	rm -f "$$stdout"

	ok_count=0
	error_count=0
	config=.markdown-link-check.json

	echo "$@ ..."
	files=$$(find . -type f -name "*.md" -not \( -path "./_site/*" -o -path "./drafts/*" -o -path "./hpc/status/incidents-201?.md" \) | sort)
	for file in $$files; do
	   $(TPUT) && printf "[    ] checking %s" "$$file"
	   pattern="(wynlog|wyndt|qb3-dev)"
	   if ! grep -H -n -E "($$pattern)" "$$file" &>> "$$stdout" ; then
	     ok_count=$$((ok_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(OK)] checking %s\\n" "$$file"
	   else
	     error_count=$$((error_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(FAIL)] checking %s\\n" "$$file"
	   fi
	done

	echo "RESULT: $$ok_count OK, $$error_count ERROR"
	if (( error_count > 0 )); then
	  grep -B 1 -E "(^ERROR:|^\[(✖|x)\]|Status: [0-9]+$$)" "$$stdout"
	  echo "$$stdout"
	  cat "$$stdout"
	  exit 1
	fi


markin-shellcheck:
	@stdout=$(TMPDIR)/stdout

	ok_count=0
	error_count=0
	config=.markdown-link-check.json

	echo "$@ ..."
	files=$$(find . -type f -name "*.sh" -not -path "./_site/*" | sort)
	for file in $$files; do
	   $(TPUT) && printf "[    ] checking %s" "$$file"
	   if shellcheck -x "$$file" &>> "$$stdout" ; then
	     ok_count=$$((ok_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(OK)] checking %s\\n" "$$file"
	   else
	     error_count=$$((error_count+1))
	     $(TPUT) && printf "\r"
	     printf "[$(FAIL)] checking %s\\n" "$$file"
	   fi
	done

	echo "RESULT: $$ok_count OK, $$error_count ERROR"
	if (( error_count > 0 )); then
	  grep -B 1 -E "(^ERROR:|^\[(✖|x)\]|Status: [0-9]+$$)" "$$stdout"
	  cat "$$stdout"
	  exit 1
	fi

check-markdown: markdownlint markdown-link-check

check: check-absolute-links check-here-links check-usernames check-legacy check-leftovers-from-C4 spell markdownlint markdown-link-check

